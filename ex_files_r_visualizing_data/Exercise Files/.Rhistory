df <- df %>%
unnest_longer(row) %>%
print()
# Another unnest_wider to get county and tax as separate
# variables.
df <- df %>%
unnest_wider(row) %>%
select(-row_id) %>%  # Drop unneeded ID
print()
# Convert from lists to character and numeric. "str_squish"
# removes repeated white space in the county column.
df <- df %>%
unnest(county) %>%
unnest(salestax) %>%
mutate(salestax = as.numeric(salestax)) %>%
mutate(county = str_squish(county)) %>%
print()
# Graph sales tax rates
df %>%
ggplot(aes(salestax)) +
geom_histogram(binwidth = 0.005)
# Summary statistics for sales tax rates
df %>% select(salestax) %>% summary()
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse, vcd)
# Use "Arthritis" dataset from vcd package
?Arthritis
df <- Arthritis %>%
as_tibble() %>%
print()
# Explore data
df %>% qplot(Age, data = .)       # Histogram
df %>% select(Age) %>% summary()  # Summary statistics
# Create two age groups
df %<>%
mutate(
Age_Groups = ifelse(
Age < 55,   # Test
'Younger',  # Value if true
'Older'     # Value if false
)
) %>%
print()         # Age_Groups is a character variable
# Transform Age_Groups into factor
df %<>%
mutate(Age_Groups = factor(Age_Groups)) %>%
print()
# Check factor levels
df %>%
pull(Age_Groups) %>%
levels()
# Change the order of the factors
df <- df %>%
mutate(
Age_Groups = factor(
Age_Groups,
levels = c('Younger','Older')
)
)
# Check new ordering
df %>%
pull(Age_Groups) %>%
levels()
# Factor frequencies
df %>%
group_by(Sex) %>%       # Select variable
summarize(Count = n())  # Count rows
# Factors frequencies as proportions
df %>%
with(table(Sex)) %>%  # Select variables to compare
prop.table() %>%      # Get the frequency
as_tibble() %>%       # Convert to tibble
print()
# Two factors variables relationships
df %>%
with(table(Sex, Age_Groups)) %>%
as_tibble() %>%
print()
# Two factors variables relationships as proportions
df %>%
with(table(Sex, Age_Groups)) %>%
prop.table() %>%
as_tibble() %>%
print()
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
region,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
# rename(y = psychRegions) %>%
print()
# "entrepreneur" is a quantitative variable
qplot(entrepreneur, geom = "histogram", data = df)
df %>%
filter(entrepreneur > 1) %>%
print()
# "region" is a character variable
qplot(region, data = df)
df %>%
filter(region == "South") %>%
print()
# "psychRegions" is a factor
qplot(psychRegions, data = df)
df %>%
filter(psychRegions == "Relaxed and Creative") %>%
print()
# "or" is the vertical pipe |
df %>%
filter(region == "South" |
psychRegions == "Relaxed and Creative") %>%
print()
# "and" is the ampersand &
df %>%
filter(region == "South" &
psychRegions == "Relaxed and Creative") %>%
print()
# "not" is the exclamation point !
df %>%
filter(region == "South" &
!psychRegions == "Relaxed and Creative") %>%
print()
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(magrittr, pacman, rio, tidyverse)
# Import data into tibble "df"
df <- import("data/MobileOS_US.xlsx") %>%
as_tibble() %>%
print()
# Define "MobileOS" as factor
df %<>%
mutate(MobileOS = as.factor(MobileOS)) %>%
print()
# Select 2010 variable, convert to whole numbers
df %<>%
mutate(OS_2010 = `2010-01` * 100) %>%
select(MobileOS, OS_2010) %>%
print()
# Check for outliers
df %>%
select(OS_2010) %>%
boxplot(horizontal = T)
# Convert to rows
df %<>%
uncount(OS_2010) %>%
print()
# Check frequencies again
df %>%
select(MobileOS) %>%
pull() %>%
fct_count()
# Relevel so Nintendo is first
df %<>%
mutate(
MobileOS = fct_relevel(MobileOS, "Nintendo")
)
# Check levels
df %>%
pull(MobileOS) %>%
levels()
# Bar chart
df %>%
ggplot(aes(MobileOS)) +
geom_bar()
# Relevel all categories by descending frequencies
df %<>%
mutate(
MobileOS = fct_infreq(MobileOS)
)
# Check levels
df %>%
pull(MobileOS) %>%
levels()
# Bar chart
df %>%
ggplot(aes(MobileOS))+
geom_bar()
# Collapse Unknown and Other
df %<>%
mutate(
MobileOS = fct_collapse(
.$MobileOS,
unknown_other = c("Unknown", "Other")
)
)
# Check levels
df %>%
pull(MobileOS) %>%
levels()
# Bar chart, again
df %>%
ggplot(aes(MobileOS))+
geom_bar()
# Lump everything but the top three in "lump_MobileOS"
df %<>%
mutate(
lump_MobileOS = fct_lump(MobileOS, n = 3)
)
# Check levels
df %>%
pull(lump_MobileOS) %>%
levels()
# Bar chart
df %>%
ggplot(aes(lump_MobileOS)) +
geom_bar()
# Lump levels with fewer than 100 counts into "min_MobileOS"
df %<>%
mutate(
min_MobileOS = fct_lump_min(MobileOS, min = 100)
)
# Check levels
df %>%
pull(min_MobileOS) %>%
levels()
# Bar chart
df %>%
ggplot(aes(min_MobileOS)) +
geom_bar()
# Compare iOS to all others with "MobileOS_iOS"
df %<>%
mutate(
MobileOS_iOS = fct_other(MobileOS, keep = "iOS")
)
# Check levels
df %>%
pull(MobileOS_iOS) %>%
levels()
# Bar chart
df %>%
ggplot(aes(MobileOS_iOS))+
geom_bar()
# Filter out Other and unknown_other
df %<>%
filter(!(MobileOS == "Other" |
MobileOS=="unknown_other"))
# Drop NA values from MobileOS
df %<>%
mutate(MobileOS = fct_drop(MobileOS))%>%
print()
# Check levels
df %>%
pull(MobileOS) %>%
levels()
# Bar chart
df %>%
ggplot(aes(MobileOS))+
geom_bar()
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# For 1-n scale, use (n+1) - x
(x1 <- 1:7)  # Parentheses print results
8 - x1
# For 0-n scale, use n - x
(x2 <- 0:6)
6 - x2
# For -x to +x scale, use 0 - x or multiple by -1
(x3 <- -3:3)
0 - x3
x3 * -1
# Info on scale(), which transforms data to z-scores, or
# distributions with a mean of 0 (if centered) and a
# standard deviation of 1 (if scaled)
?scale
# Centering variables on their respective means
(x4 <- matrix(1:10, ncol = 2))
scale(x4, scale = FALSE)  # Default "center = TRUE")
# Calculating z-scores
scale(x4)  #   # Default "center = TRUE, scale = TRUE")
# T-scores
x5 <- x4 %>%
scale() %>%  # Converts each column to z-scores
`*`(10) %>%  # Multiplies all values by 10 (so SD = 10)
`+`(50) %>%  # Adds 50 to all values (so M = 50)
print()
# IQ scores
x6 <- x4 %>%
scale() %>%   # Converts each column to z-scores
`*`(15) %>%   # Multiplies all values by 15 (so SD = 15)
`+`(100) %>%  # Adds 100 to all values (so M = 100)
print()
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(datasets, pacman, tidyverse)
# "islands" dataset has a strong positive skew
?islands
islands
islands %>% hist(main = NULL)
islands %>% boxplot(horizontal = T)
# Sort observations in descending value
islands2 <- islands %>%
enframe() %>%             # Convert vector to tibble
arrange(desc(value)) %>%  # Sort by descending values
print()
# Filter out the continents
islands2 %<>%
filter(value < 1000) %>%
print()
# pull() creates a vector (like islands$value), while
# select() creates a dataframe; different functions need
# different data formats
islands2 %>% pull(value) %>% hist(main = NULL)
islands2 %>% select(value) %>% boxplot(horizontal = T)
# Sort observations in descending value
islands3 <- islands %>%
enframe() %>%             # Convert vector to tibble
arrange(desc(value)) %>%  # Sort by descending values
print()
# The largest non-continent is Greenland, with an area of
# about 840,000 square miles (coded as 840 in this dataset)
islands3 <- islands3 %>%
mutate(
value = ifelse(
value > 840,  # Test if value is greater than 840
840,          # If true, replace value with 840
value         # If false, keep existing value
)
) %>%
print()
# Graph results
islands3 %>% pull(value) %>% hist(main = NULL)
islands3 %>% select(value) %>% boxplot(horizontal = T)
islands4 <- islands %>%
enframe() %>%             # Convert vector to tibble
arrange(desc(value)) %>%  # Sort by descending values
print()
islands4 %<>%
mutate(
landmass = ifelse(
value < 1000,  # Test if value is less than 1m sq mi
"island",      # If true, it's an island
"continent"    # If false, it's a continent
)
) %>%
print()
# Boxplot of area of continents
islands4 %>%
filter(landmass == "continent") %>%
select(value) %>%
boxplot(
horizontal = T,
main = "Area of Continents",
xlab = "Thousands of Square Miles"
)
# Boxplot of area of islands
islands4 %>%
filter(landmass == "island") %>%
select(value) %>%
boxplot(
horizontal = T,
main = "Area of Islands",
xlab = "Thousands of Square Miles"
)
# Strong positive skew
islands %>% hist(main = NULL)
islands %>% boxplot(horizontal = T)
# log is natural logarithm with base e (base 10 is log10);
# it brings in extreme positive values
islands %>% log() %>% hist(main = NULL)
islands %>% log() %>% boxplot(horizontal = T)
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code, museum:modernDance) %>%
print()
# Create new variable to count variables that meet criterion
df <- df %>%
mutate(
artsCount =                       # Create new variable
ifelse(museum > 1, 1, 0) +      # Add 1 if true
ifelse(scrapbook > 1, 1, 0) +   # Add 1 if true
ifelse(modernDance > 1, 1, 0)   # Add 1 if true
)
# Sort data by new variable
df %>%
select(state_code, artsCount, museum:modernDance) %>%
arrange(desc(artsCount)) %>%
print(n = Inf)
# Histogram of values
df %>%
pull(artsCount) %>%
hist(main = "Values of artsCount")
df %<>%
mutate(
likeArts = case_when(
museum > 1 | scrapbook > 1 | modernDance > 1 ~ "yes",
TRUE ~ "no"  # All other values
)
) %>%
select(
state_code,
likeArts,
artsCount,
museum:modernDance) %>%
arrange(desc(artsCount)) %>%
print(n = Inf)
browseURL("https://CRAN.R-project.org/package=psych")
browseURL("https://CRAN.R-project.org/package=Scale")
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(ST = state_code,
museum:modernDance) %>%
print()
# Calculate the mean of several rows after column selection
df %<>%
mutate(
artsCrafts = rowMeans(df %>%   # Select data
select(museum:modernDance),  # Select columns
na.rm = TRUE)                # Remove missing values
) %>%
arrange(desc(artsCrafts)) %>%    # Put in descending order
print(n = Inf)                   # Display all rows
# Histogram of scores on artsCrafts
df %>%
pull(artsCrafts) %>%
hist(main = "Average Scores on artsCrafts")
browseURL("https://CRAN.R-project.org/package=psych")
browseURL("https://CRAN.R-project.org/package=Scale")
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
# Clear plots
graphics.off()  # Clears plots, closes all graphics devices
# Clear console
cat("\014")  # Mimics ctrl+L
