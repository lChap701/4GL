sort(decreasing = T) %>%  # Sort table
barplot()
plot
# 100% stacked bar
diamonds %>%
select(color, clarity) %>%
plot()
# Stacked bars: step 1: create table
df <- diamonds %>%
select(color, clarity) %>%
table() %>%
print()  # Show table in Console
# Stacked bars: step 1: create graph
df %>%
barplot(legend = rownames(.))  # Draw plot w/legend
# Side-by-side bar
df %>%
barplot(
legend = rownames(.),  # Dot is placeholder for pipe
beside = T  # Put bars next to each other
)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Using the diamonds dataset from ggplot2
?diamonds  # Get information about the diamonds dataset
diamonds   # Display the beginning of the dataset
?hist
# Histogram with defaults
hist(diamonds$price)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Using the diamonds dataset from ggplot2
?diamonds  # Get information about the diamonds dataset
diamonds   # Display the beginning of the dataset
?plot     # Get info on "Generic X-Y Plotting
?boxplot  # Get info on the "Bar Plots" function
# Boxplot with defaults
boxplot(diamonds$price)
# Similar process using pipes
diamonds %>%
select(price) %>%
boxplot()
# Boxplot with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
xlab   = "Price of Diamonds",
col    = "#CD0000"  # red3
)
# Boxplots by group using plot()
diamonds %>%
select(color, price) %>%
plot()
# Boxplots by group using boxplot()
diamonds %>%
select(color, price) %>%
boxplot(
price ~ color,  # Tilde indicates formula
data  = . ,     # Dot is placeholder for pipe
col   = "#CD0000"
)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df %>%
select(instagram:modernDance) %>%
plot()  # Plot all associations
# Bivariate scatterplot with defaults
df %>%
select(scrapbook:modernDance) %>%
plot()
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "Scatterplot of Google Searches by State",
xlab = "Searches for \"scrapbook\"",
ylab = "Searches for \"modern dance\"",
col  = "gray",  # Color of points
pch  = 20,      # "Plotting character" (small circle)
)
?pch  # See plotting characters
# Add fit linear regression line (y ~ x)
df %>%
lm(modernDance ~ scrapbook, data = .) %>%
abline()
# Identify outlier
df %>%
select(state_code, scrapbook) %>%
filter(scrapbook > 4) %>%  # Select outlier
print()
# Bivariate scatterplot without outlier
df %>%
select(scrapbook:modernDance) %>%
filter(scrapbook < 4) %>%  # filter out outlier
plot(
main = "Scatterplot of Google Searches by State",
xlab = "Searches for \"scrapbook\"",
ylab = "Searches for \"modern dance\"",
col  = "gray",  # Color of points
pch  = 20,      # "Plotting character" (small circle)
)
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%  # filter out outlier
lm(modernDance ~ scrapbook, data = .) %>%
abline()
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Load base packages manually
library(datasets)  # For example datasets
# uspop
?uspop  # Get info about data
uspop   # Display data
?ts  # Get info about time-series objects
# Plot with default plot()
plot(uspop)
# Plot with options
uspop %>%
plot(
main = "US Population 1790â€“1970 ",
sub  = "(Source: datasets::uspop)",
xlab = "Year",
ylab = "Population (in millions)",
)
abline(v = 1930, col = "lightgray")
text(1930, 10, "1930", col = "red3")
abline(v = 1940, col = "lightgray")
text(1940, 2, "1940", col = "red3")
# Plot with ts.plot()
?ts.plot
# Although this can be used for a single time series, plot
# is easier to use and is preferred.
ts.plot(uspop)
# Plot with plot.ts()
# More powerful alternative
?plot.ts
plot.ts(uspop)
# EuStockMarkets
?EuStockMarkets
EuStockMarkets
# Three different plot functions
plot(EuStockMarkets)     # Stacked windows
plot.ts(EuStockMarkets)  # Identical
ts.plot(EuStockMarkets)  # One window
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
rename(y = psychRegions) %>%
print()
# Calculate clusters
hc <- df %>%  # Get data
dist %>%    # Compute distance/dissimilarity matrix
hclust      # Compute hierarchical clusters
# Plot dendrogram
hc %>% plot(labels = df$state_code)
# Draw boxes around clusters
hc %>% rect.hclust(k = 2, border = "gray80")  # 2 boxes
hc %>% rect.hclust(k = 3, border = "gray60")  # 3 boxes
hc %>% rect.hclust(k = 4, border = "gray40")  # 4 boxes
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
region,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
# rename(y = psychRegions) %>%
print()
# "entrepreneur" is a quantitative variable
df %>%
filter(entrepreneur > 1) %>%
print()
# "region" is a character variable
df %>%
filter(region == "South") %>%
print()
# "psychRegions" is a factor
df %>%
filter(psychRegions == "Relaxed and Creative") %>%
print()
# "or" is the vertical pipe |
df %>%
filter(region == "South" |
psychRegions == "Relaxed and Creative") %>%
print()
# "and" is the ampersand &
df %>%
filter(region == "South" &
psychRegions == "Relaxed and Creative") %>%
print()
# "not" is the exclamation point !
df %>%
filter(region == "South" &
!psychRegions == "Relaxed and Creative") %>%
print()
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
# rename(y = psychRegions) %>%
print()
df %>%
mutate(relaxed = recode(psychRegions,
"Relaxed and Creative" = "yes",
"Friendly and Conventional" = "no",
.default = "no")) %>%  # Sets default value
select(state_code, psychRegions, relaxed)
# case_when works a little differently so we'll save as df2
df2 <- df %>%
mutate(likeArts = case_when(
museum > 1 | scrapbook > 1 | modernDance > 1 ~ "yes",
TRUE ~ "no"))  # All other values
df2 %>%
select(state_code, likeArts, museum:modernDance) %>%
arrange(desc(likeArts)) %>%
print(n = Inf)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
# rename(y = psychRegions) %>%
print()
df %>%
mutate(
socialMedia = (instagram + facebook + retweet) / 3,
artsCrafts  = (museum + scrapbook + modernDance) / 3
) %>%
select(state_code, socialMedia, artsCrafts)
df %>%
mutate(
outgoing = (volunteering + (privacy * -1)) / 2
) %>%
select(state_code, outgoing, volunteering, privacy)
# Packages "psych" and "scale" make this process much easier
browseURL("https://CRAN.R-project.org/package=psych")
browseURL("https://CRAN.R-project.org/package=Scale")
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# Save categorical variables
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code, region, psychRegions) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
summary(df)  # Gives frequencies for factors only
# summary() not very useful
df %>%
select(region) %>%
summary()
# table() works better
df %>%
select(region) %>%
table()
# Using summary() works best
df %>%
select(psychRegions) %>%
summary()
# Using table()
df %>%
select(psychRegions) %>%
table()
# Summarize multiple factors
df <- df %>%
mutate(region = as.factor(region)) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
summary(df)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
# rename(y = psychRegions) %>%
print()
df %>% summary()  # Summary for entire table
df %>%    # Summary for one variable
select(entrepreneur) %>%
summary()
# Tukey's five-number summary: minimum, lower-hinge,
# median, upper-hinge, maximum. No labels.
fivenum(df$entrepreneur)
# Boxplot stats: hinges, n, CI for median, outliers
boxplot(df$entrepreneur, notch = T, horizontal = T)
boxplot.stats(df$entrepreneur)
p_load(psych)           # Load psych package
p_help(psych, web = F)  # Get info on psych package
describe(df$entrepreneur)  # Single variable
describe(df)               # Entire dataframe
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# Save Google Correlate variables
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
# Correlation matrix for data frame
cor(df)
# Rounded to 2 decimals
df %>%
cor() %>%
round(2)
# Can test one pair of variables at a time
# Gives r, hypothesis test, and confidence interval
cor.test(df$instagram, df$privacy)
# Install "Hmisc" package to get p-values for matrix
p_load(Hmisc)
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# Save Google Correlate variables
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
# Correlation matrix for data frame
cor(df)
# Rounded to 2 decimals
df %>%
cor() %>%
round(2)
# Can test one pair of variables at a time
# Gives r, hypothesis test, and confidence interval
cor.test(df$instagram, df$privacy)
# Install "Hmisc" package to get p-values for matrix
p_load(Hmisc)
# Need to coerce from dataframe to matrix to get both a
# correlation matrix and p-values (in separate tables)
df %>%
as.matrix() %>%
rcorr()
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# Save categorical variables
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code, region, psychRegions) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
# Create contingency table
ct <- table(df$region, df$psychRegions)
ct
p_load(magrittr)  # To get arithmetic aliases
# Row percentages
ct %>%
prop.table(1) %>%  # 1 is for row perdentages
round(2) %>%
multiply_by(100)
# Column percentages
ct %>%
prop.table(2) %>%  # 2 is for columns percentages
round(2) %>%
multiply_by(100)
# Total percentages
ct %>%
prop.table() %>%  # No argument for total percentages
round(2) %>%
multiply_by(100)
# Chi-squared testj (but n is small)
tchi <- chisq.test(ct)
tchi
# Additional tables
tchi$observed   # Observed frequencies (same as ct)
tchi$expected   # Expected frequencies
tchi$residuals  # Pearson's residual
tchi$stdres     # Standardized residual
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
